# Airflow common specs
x-airflow-common:
  &airflow-common
  # image: apache/airflow:2.10.4
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: '${AIRFLOW__CORE__LOAD_EXAMPLES:-false}'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-./airflow}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-./airflow}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-./airflow}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-./airflow}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-./airflow}/admin:/opt/airflow/admin
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres-af:
      condition: service_healthy
  networks:
    af_network:

services:
  
  # Postgres metadata database for airflow
  postgres-af:
    image: postgres:13
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_af-postgres
    hostname: postgres
    ports:
      - '5435:5432'
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-af-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      af_network:

  
  # Redis for airflow
  redis:
    image: redis:7.2-bookworm
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_af-redis
    hostname: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      af_network:
  
  # Airflow webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_af-webserver
    hostname: airflow-webserver
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  # Airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_af-scheduler
    hostname: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  # Airflow worker
  airflow-worker:
    # build: .
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_af-worker
    hostname: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  # Airflow triggerer
  airflow-triggerer:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_af-triggerer
    hostname: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      af_network:

  # Airflow init
  airflow-init:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_af-init
    hostname: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,admin}
        airflow db migrate
        airflow connections import /sources/admin/connections/connections.yaml

        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-./airflow}:/sources
    networks:
      af_network:

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      af_network:

  # PostgreSQL DB
  db-postgres:
    image: postgres:13.3
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_db-postgres
    hostname: db-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres_password}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_password"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./source/init-scripts/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    networks:
      af_network:
      
        
  # ClickHouse DB (clickhouse-server)
  db-clickhouse:
    image: clickhouse/clickhouse-server:24.9.3
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_db-clickhouse
    hostname: db-clickhouse
    ports:
      - "${CLICKHOUSE_PORT:-8123}:8123"
    healthcheck:
      test: ["CMD", "sh", "-c", "wget --no-verbose --tries=1 http://127.0.0.1:8123/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 1m
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./source/clickhouse-server:/etc/clickhouse-server
    networks:
      af_network:

  # Grafana BI
  bi-grafana:
    image: grafana/grafana-enterprise:latest
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_bi-grafana
    ports:
      - '${GRAFANA_PORT:-3000}:3000'
    environment:
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-grafanaadmin}
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./source/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./source/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./source/grafana/dashboards:/etc/dashboards
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsSL http://172.23.0.7:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 30s
    networks:
      af_network:

  # OBJECT STORAGE MINIO SERVICE
  os-minio:
    image: minio/minio:latest
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_minio
    hostname: minio
    volumes:
      - minio-data:/data
    ports:
      - "${MINIO_PORT:-9001}:9001"
      - "9003:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DOMAIN: minio
    command: server /data --address ":9000" --console-address ":9001"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsSL http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 15s
    networks:
      af_network:

  # OBJECT STORAGE MINIO INIT
  os-minio-init:
    image: minio/mc
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_minio-init
    depends_on:
      os-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set miniolink http://minio:9000 admin minioadmin;
      /usr/bin/mc mb miniolink/postgres-data;
      /usr/bin/mc policy set public miniolink/postgres-data;
      exit 0;
      "
    networks:
      af_network:

  # ZooKeeper for Kafka (Optional)
  zookeeper:
    image: zookeeper:3.7
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_zookeeper
    hostname: ${COMPOSE_PROJECT_NAME:-d-compose}_zookeeper
    ports:
      - ${ZK_OUT_PORT:-22181}:${ZK_CLIENT_PORT:-2181}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZK_CLIENT_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "zkCli.sh -server localhost:2181 get / | grep zookeeper.version"]
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 60s
    networks:
      af_network:

  # Apache Kafka (Optional)
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_kafka
    hostname: ${COMPOSE_PROJECT_NAME:-d-compose}_kafka
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT:-9092}:9092
      - ${KAFKA_OPORT:-29092}:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 172.23.0.10:${ZK_CLIENT_PORT:-2181}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'healthcheck' | kafka-console-producer --bootstrap-server localhost:9092 --topic health-check-topic && kafka-topics --bootstrap-server localhost:9092 --list | grep health-check-topic && exit 0 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s
    networks:
      af_network:

  nifi:
    image: apache/nifi:1.28.1
    container_name: ${COMPOSE_PROJECT_NAME:-d-compose}_nifi
    hostname: ${COMPOSE_PROJECT_NAME:-d-compose}_nifi
    depends_on:
      - zookeeper
    ports:
      - "${NIFI_PORT:-8090}:8080"
      - "8181:8181"
      - "8443:8443"
      - "10000:10000"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_WEB_PROXY_HOST=localhost
      - NIFI_ZOOKEEPER_CONNECT_STRING=172.23.0.10:${ZK_CLIENT_PORT:-2181}
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsSL http://172.23.0.30:8080/nifi || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 60s
    networks:
      af_network:


networks:
  af_network:

volumes:
  postgres-af-data:
  postgres-data:
  clickhouse-data:
  grafana-data:
  minio-data: