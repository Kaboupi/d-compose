# Airflow common specs
x-airflow-common:
  &airflow-common
  # image: apache/airflow:2.10.4
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres-af:
      condition: service_healthy
  networks:
    - airflow-network

services:
  
  # Postgres metadata database for airflow
  postgres-af:
    image: postgres:13
    container_name: kaboupi-af-postgres
    hostname: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow-network

  
  # Redis for airflow
  redis:
    image: redis:7.2-bookworm
    container_name: kaboupi-af-redis
    hostname: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow-network
  
  # Airflow webserver
  airflow-webserver:
    <<: *airflow-common
    container_name: kaboupi-af-webserver
    hostname: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # Airflow scheduler
  airflow-scheduler:
    <<: *airflow-common
    container_name: kaboupi-af-scheduler
    hostname: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # Airflow worker
  airflow-worker:
    <<: *airflow-common
    container_name: kaboupi-af-worker
    hostname: airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # Airflow triggerer
  airflow-triggerer:
    <<: *airflow-common
    container_name: kaboupi-af-triggerer
    hostname: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # Airflow init
  airflow-init:
    <<: *airflow-common
    container_name: kaboupi-af-init
    hostname: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - airflow-network

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - airflow-network

  # PostgreSQL DB
  postgres:
    image: postgres:13.3
    container_name: kaboupi-postgres
    hostname: kaboupi-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-kaboupi}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-kaboupi}
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    # # Включить для PV к данным постгреса
    # volumes:
    #   - ./kaboupi_postgres:/var/lib/postgresql/data/
    networks:
      clickhouse-network:
        ipv4_address: 172.23.0.21
      
        
  # ClickHouse DB (clickhouse-server)
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: kaboupi-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9440:9440"
    healthcheck:
      test: wget --no-verbose --tries=1 http://127.0.0.1:8123/ping || exit 1
    volumes:
      - ./kaboupi_clickhouse:/etc/clickhouse-server
    networks:
      clickhouse-network:
        ipv4_address: 172.23.0.11

  # Grafana BI
  grafana:
    image: grafana/grafana-enterprise
    container_name: kaboupi-grafana
    ports:
      - '3000:3000'
    environment:
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-kaboupi}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-kaboupi}
    restart: unless-stopped
    volumes:
      - ./kaboupi_grafana:/var/lib/grafana
      - ./kaboupi_grafana-provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./kaboupi_grafana-provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      clickhouse-network:
        ipv4_address: 172.23.0.7

  # Minio image as S3
  minio:
    image: minio/minio:latest
    container_name: kaboupi-minio
    ports:
      - "9001:9001"
      - "9003:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-kaboupi}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-kaboupipass}
    command: server /data --console-address ":9001"
    # # Включить для PV к данным Object Storage
    # volumes:
    #   - ./kaboupi_minio:/data

  # ZooKeeper for Kafka (Optional)
  zookeeper:
    image: zookeeper:3.7
    container_name: "kaboupi-zookeeper"
    hostname: kaboupi-zookeeper
    ports:
      - 22181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      clickhouse-network:
        ipv4_address: 172.23.0.10

  # # Apache Kafka (Optional)
  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kaboupi-kafka
  #   hostname: kaboupi-kafka
  #   depends_on:
  #     - zookeeper
  #   networks:
  #     clickhouse-network:
  #       ipv4_address: 172.23.0.20
  #   ports:
  #     - 29092:29092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 172.23.0.10:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

networks:
  clickhouse-network:
    name: clickhouse-network
    ipam:
      config:
        - subnet: 172.23.0.0/24
  airflow-network:
    name: airflow-network


volumes:
  kaboupi_airflow:
  kaboupi_airflow_postgres:
    driver: local
    driver_opts:
      type: none
      device: ./kaboupi_airflow/postgres-db-volume
      o: bind
  # # Включить для PV
  # kaboupi_postgres:
  #   driver: local
  # kaboupi_minio:
  #   driver: local
  kaboupi_clickhouse:
    driver: local
  kaboupi_grafana:
    driver: local