name: Docker Image Check

on:
  pull_request:
    branches:
      - master
  # push:
  #   branches:
  #     - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:latest
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Build Docker images
        run: |
          docker compose -f docker-compose.yaml build

      - name: Run airflow-init
        run: |
          docker compose -f docker-compose.yaml up airflow-init
          docker compose -f docker-compose.yaml logs airflow-init
        
      - name: Start all services
        run: |
          docker compose -f docker-compose.yaml up -d

      - name: Start healthchecks
        run: |
          declare -a services=(
            "d-compose_af-webserver"
            "d-compose_af-scheduler"
            "d-compose_af-worker"
            "d-compose_db-clickhouse"
            "d-compose_db-postgres"
            "d-compose_bi-grafana"
            "d-compose_minio"
            "d-compose_nifi"
            "d-compose_kafka"
            "d-compose_zookeeper"
          )
          
          # Basic timeout for all services
          timeout=180

          # Function to check service health
          check_service() {
            local service=$1
            local start_time=$(date +%s)

            # echo "[$cur_time] - Waiting for $service to be healthy..."

            while true; do
              cur_time=$(date +"%H:%M:%S")

              if ! docker ps -a --format '{{.Names}}' | grep -q "^${service}$"; then
                echo -e "\nService $service does not exist! Exiting..."
                return 1
              fi

              health_state=$(docker inspect -f '{{.State.Health.Status}}' "${service}")
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))

              echo "[$cur_time] - Waiting for $service to be healthy...($health_state, $elapsed_time / $timeout)"

              if [ "$health_state" == "healthy" ]; then
                echo "[$cur_time] - Service $service is healthy!"
                return 0
              fi

              if [ "$health_state" == "unhealthy" ]; then
                echo -e "[$cur_time] - ERROR!\nService $service is unhealthy! Exiting...\n$(docker logs $service -n 30)"
                return 1
              fi

              if [ $elapsed_time -ge $timeout ]; then
                echo "[$cur_time] - Timeout reached for $service. Exiting..."
                return 1
              fi

              sleep 5
            done
          }

          status=0        # Status code: 0 - success, 1 - fail
          failed_count=0  # Count of failed tests
          pids=()         # Array for pids to track

          # Start to monitor all services
          for service in "${services[@]}"; do
            check_service "$service" &
            pids+=($!)
          done

          # Check service return status
          for pid in "${pids[@]}"; do
            wait $pid
            if [ $? -ne 0 ]; then
              status=1
              failed_count=$((failed_count + 1))
            fi
          done

          echo -e "\n[$(date +"%H:%M:%S")] - Exiting the healthcheck stage\nFailed healthchecks: $failed_count"

          exit $status


      - name: Clean up
        run: |
          docker compose -f docker-compose.yaml down
